""" Functions for weapon class
"""

from math import floor, sin, pi, ceil


def calc_tt(ammo: int) -> int:
    """ Calculates the free rounds generated by TT

    Args:
        ammo (int): Rounds in the magazine

    Raises:
        TypeError: Ammo must be an int greater than 0


    Returns:
        int: Free rounds generated
    """
    if not (isinstance(ammo, int) and ammo > 0):
        raise TypeError("Ammo must be an int greater than 0")
    return int(floor((ammo - 1)/2))


def calc_fttc(ammo: int) -> int:
    """ Calculates the free rounds generated by FTTC

    Args:
        ammo (int): Rounds in the magazine

    Raises:
        TypeError: Ammo must be an int greater than 0

    Returns:
        int: Free rounds generated
    """
    if not (isinstance(ammo, int) and ammo > 0):
        raise TypeError("Ammo must be an int greater than 0")
    return int(0.5 * sin(pi * (ammo + 0.5)) + (2 * ammo) - 2.5 - ammo)


def calc_fttc_tt(ammo: int) -> int:
    """ Calculates the free rounds generated by FTTC and TT

    Args:
        ammo (int): Rounds in the magazine

    Raises:
        TypeError: Ammo must be an int greater than 0

    Returns:
        int: Free rounds generated
    """
    if not (isinstance(ammo, int) and ammo > 0):
        raise TypeError("Ammo must be an int greater than 0")
    return int((6 * (ammo - 2) - pow(-1, ammo)) - ammo)


def calc_rewind(base_ammo: int, current_ammo: int, multiplier: float) -> int:
    """ Calculates the total rounds returned from reserves by RR

    Args:
        base_ammo (int): Base magazine capacity
        current_ammo (int): Current rounds in magazine
        multiplier (float): Multiplier for rewind rounds

    Raises:
        TypeError: base_ammo must be an int greater than 0
        TypeError: current_ammo must be an int greater than 0
        TypeError: multiplier must be a float

    Returns:
        int: _description_
    """
    if not (isinstance(base_ammo, int) and base_ammo > 0):
        raise TypeError("base_ammo must be an int greater than 0")
    if not (isinstance(current_ammo, int) and current_ammo > 0):
        raise TypeError("current_ammo must be an int greater than 0")
    if not (isinstance(multiplier, float) and (multiplier in (0.6, 0.7))):
        raise TypeError("multiplier must be a float equal to 0.6 or 0.7")

    total_returned = 0
    while current_ammo >= ceil(base_ammo*0.2875):
        returned_ammo = __rewind_return(base_ammo, current_ammo, multiplier)
        if returned_ammo == current_ammo:
            return "Reserves"
        total_returned += returned_ammo
        current_ammo = returned_ammo
    return total_returned


def __rewind_return(base_ammo: int, current_ammo: int, multiple: float) -> int:
    """ Calculates one proc of RR

    Args:
        base_ammo (int): Base magazine capacity
        current_ammo (int): Current rounds in magazine
        multiple (float): Multiplier for rewind rounds

    Raises:
        TypeError: base_ammo must be an int greater than 0
        TypeError: current_ammo must be an int greater than 0
        TypeError: multiple must be a float

    Returns:
        int: Rounds returned from reserves
    """
    if not (isinstance(base_ammo, int) and base_ammo > 0):
        raise TypeError("magazine_base must be an int greater than 0")
    if not (isinstance(base_ammo, int) and current_ammo > 0):
        raise TypeError("magazine_current must be an int greater than 0")
    if not (isinstance(multiple, float) and (multiple in (0.6, 0.7))):
        raise TypeError("multiplier must be a float equal to 0.6 or 0.7")

    if current_ammo >= ceil(base_ammo * 0.2875):
        refunded = ceil(current_ammo * multiple)
        return refunded if base_ammo >= refunded else base_ammo
    return 0
